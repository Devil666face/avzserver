// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.513
package view

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "github.com/Devil666face/avzserver/pkg/file"
import "strings"
import "unicode"

var emojiMap = map[string]string{
	"KAV_old":   "🦠",
	"KES":       "💻",
	"KESL":      "🐧",
	"KLMS":      "📧",
	"KSC":       "🎚",
	"KSLVA":     "📺",
	"KESA":      "📱",
	"DRW_ESS":   "🛡",
	"DRW_SS":    "💻",
	"DRW_Linux": "🐧",
}

func getEmojiIcon(f file.File) string {
	if f.IsDir {
		return emojiIconFolder(f)
	}
	return emojiIconFile(f)
}

func emojiIconFolder(f file.File) string {
	switch {
	case f.Name == "DrWeb":
		return "🕷"
	case f.Name == "Kaspersky":
		return "🦠"
	default:
		return "📂"
	}
}

func beforeFirstDigit(input string) string {
	var result string
	for _, char := range input {
		if unicode.IsDigit(char) {
			return result
		}
		result += string(char)
	}
	return result
}

func emojiIconFile(f file.File) string {
	s := strings.Split(f.Name, "_")
	switch {
	case strings.HasSuffix(f.Name, ".iso"):
		return "📀"
	case strings.HasSuffix(f.Name, ".md5") || strings.HasSuffix(f.Name, ".cksum"):
		return "🔐"
	case strings.ContainsAny(f.Name, "DRW"):
		if e, ok := emojiMap[s[0]+"_"+beforeFirstDigit(s[1])]; ok {
			return e
		}
		return "🕷"
	case strings.HasPrefix(f.Name, "K"):
		if e, ok := emojiMap[s[0]]; ok {
			return e
		}
		return "🦠"
	case strings.HasSuffix(f.Name, ".zip") || strings.HasSuffix(f.Name, ".tar.gz"):
		return "🗃"
	default:
		return "📄"
	}
}

func BasesList(v *View, m Map) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
			if !templ_7745c5c3_IsBuffer {
				templ_7745c5c3_Buffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
			}
			templ_7745c5c3_Err = BasesContent(v, m).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if !templ_7745c5c3_IsBuffer {
				_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = BaseContainer("Bases", v, m).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
