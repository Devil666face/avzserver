package view

import "github.com/Devil666face/avzserver/pkg/file"
import "fmt"
import "strings"
import "unicode"

var emojiMap = map[string]string{
	"KAV_old":   "🦠",
	"KES":       "💻",
	"KESL":      "🐧",
	"KLMS":      "📧",
	"KSC":       "🎚",
	"KSLVA":     "📺",
	"KESA":      "📱",
	"DRW_ESS":   "🛡",
	"DRW_SS":    "💻",
	"DRW_Linux": "🐧",
}

func getEmojiIcon(f file.File) string {
	if f.IsDir {
		return emojiIconFolder(f)
	}
	return emojiIconFile(f)
}

func emojiIconFolder(f file.File) string {
	switch {
	case f.Name == "DrWeb":
		return "🕷"
	case f.Name == "Kaspersky":
		return "🦠"
	default:
		return "📂"
	}
}

func beforeFirstDigit(input string) string {
	var result string
	for _, char := range input {
		if unicode.IsDigit(char) {
			return result
		}
		result += string(char)
	}
	return result
}

func emojiIconFile(f file.File) string {
	s := strings.Split(f.Name, "_")
	switch {
	case strings.HasSuffix(f.Name, ".iso"):
		return "📀"
	case strings.HasSuffix(f.Name, ".md5") || strings.HasSuffix(f.Name, ".cksum"):
		return "🔐"
	case strings.ContainsAny(f.Name, "DRW"):
		if e, ok := emojiMap[s[0]+"_"+beforeFirstDigit(s[1])]; ok {
			return e
		}
		return "🕷"
	case strings.HasPrefix(f.Name, "K"):
		if e, ok := emojiMap[s[0]]; ok {
			return e
		}
		return "🦠"
	case strings.HasSuffix(f.Name, ".zip") || strings.HasSuffix(f.Name, ".tar.gz"):
		return "🗃"
	default:
		return "📄"
	}
}

templ BasesContent(v *View, m Map) {
	<div class="table-responsive" id="bases">
		<table class="table">
			<thead>
				<tr>
					<th scope="col"></th>
					<th scope="col"></th>
					<th scope="col"></th>
				</tr>
			</thead>
			<tbody>
				if v.PreviousPage()!="/" {
					<button
						type="button"
						class="btn btn-outline-info"
						hx-get={ v.PreviousPage() }
						hx-swap="innerHTML"
						hx-target="#bases"
						hx-push-url="true"
					>
						🔙
					</button>
				}
				for i, f:=range m[DirContentKey].([]file.File) {
					<tr>
						<th scope="row">{ fmt.Sprint(i+1) }</th>
						<td>{ f.ModTime.Format("2006-01-02 15:04:05") }</td>
						<td>
							if f.IsDir {
								<button
									type="button"
									class="btn btn-outline-primary"
									hx-get={ v.Path() + "/" + f.Name }
									hx-swap="innerHTML"
									hx-target="#bases"
									hx-push-url="true"
								>
									{ getEmojiIcon(f) } { f.Name }
								</button>
							} else {
								<a
									href={ templ.SafeURL(f.Href) }
									if strings.HasSuffix(f.Name,".md5") {
										class="btn btn-outline-secondary"
									} else {
										class="btn btn-outline-success"
									}
								>
									{ getEmojiIcon(f) } { f.Name }
								</a>
							}
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ BasesList(v *View, m Map) {
	@Base(v.Path()) {
		<main class="container pt-5">
			@BasesContent(v,m)
		</main>
	}
}
